import os
import asyncio
import traceback
from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ Render ‚Üí Environment Variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Render.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üì© –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", url="https://trepall.github.io/cherry-deals/")
    kb.adjust(1)

    text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
        "üíº –ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!\n"
        "‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç!\n\n"
        "‚ô¶Ô∏è –ù–∏–∫–∞–∫–æ–π –∫–æ–º–∏—Å—Å–∏–∏\n"
        "‚ô¶Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
        "üíå –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π! üõ°"
    )

    await message.answer_photo(
        photo="photo="https://i.ibb.co/xqhv5QHX/IMG-7504.jpg",
        caption=text,
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

# üåê –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
async def handle_root(request):
    return web.Response(text="Cherry Deals bot is alive!")

async def start_web_server():
    app = web.Application()
    app.add_routes([web.get("/", handle_root)])
    port = int(os.environ.get("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"üåê Web server running on port {port}")

# ‚ôªÔ∏è –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def run_bot():
    while True:
        try:
            print("‚úÖ Bot is running...")
            await dp.start_polling(bot)
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞:", e)
            traceback.print_exc()
            print("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

# üïê –§—É–Ω–∫—Ü–∏—è keep-alive (–ø–∏–Ω–≥—É–µ—Ç Render URL)
async def keep_alive():
    url = os.getenv("RENDER_EXTERNAL_URL")
    if not url:
        print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, keep-alive –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return
    print(f"üîÑ Keep-alive –≤–∫–ª—é—á–µ–Ω, –ø–∏–Ω–≥—É–µ—Ç {url}")
    async with ClientSession() as session:
        while True:
            try:
                async with session.get(url) as resp:
                    print(f"üåç Keep-alive ping: {resp.status}")
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ keep-alive:", e)
            await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async def main():
    await asyncio.gather(start_web_server(), run_bot(), keep_alive())

if __name__ == "__main__":
    asyncio.run(main())
