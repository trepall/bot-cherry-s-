import os
import asyncio
import traceback
from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ Render ‚Üí Environment Variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Render.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üì© –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å CherryDeals",
        web_app=types.WebAppInfo(url="https://trepall.github.io/cherry-deals/")  # üëà —Ç–µ–ø–µ—Ä—å —ç—Ç–æ Mini App
    )
    kb.adjust(1)

    text = (
        "üçí *Cherry Deals | Fast & Safety - –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö!*\n\n"
        "–ü–æ—á–µ–º—É –∫–ª–∏–µ–Ω—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å:\n\n"
        "üîí –ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã\n"
        "üíé –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã - –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ\n"
        "üõ° –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚ö° –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    )
    
    await message.answer_photo(
        photo="https://i.ibb.co/CKBd0F2m/image.jpg",  # üëà –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        caption=text,
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

# üåê –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
async def handle_root(request):
    return web.Response(text="Cherry Deals bot is alive!")

async def start_web_server():
    app = web.Application()
    app.add_routes([web.get("/", handle_root)])
    port = int(os.environ.get("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"üåê Web server running on port {port}")

# ‚ôªÔ∏è –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def run_bot():
    while True:
        try:
            print("‚úÖ Bot is running...")
            await dp.start_polling(bot)
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞:", e)
            traceback.print_exc()
            print("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

# üïê Keep-alive –¥–ª—è Render
async def keep_alive():
    url = os.getenv("RENDER_EXTERNAL_URL")
    if not url:
        print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, keep-alive –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return
    print(f"üîÑ Keep-alive –≤–∫–ª—é—á–µ–Ω, –ø–∏–Ω–≥—É–µ—Ç {url}")
    async with ClientSession() as session:
        while True:
            try:
                async with session.get(url) as resp:
                    print(f"üåç Keep-alive ping: {resp.status}")
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ keep-alive:", e)
            await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async def main():
    await asyncio.gather(start_web_server(), run_bot(), keep_alive())

if __name__ == "__main__":
    asyncio.run(main())
